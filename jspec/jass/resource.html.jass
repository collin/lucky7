require "#{Lucky7Root}/lib/lucky7.js"
require "#{Lucky7Root}/lib/lucky7/resource.js"

describe Lucky7.Resource
  it before
    L7R = Lucky7.Resource;
    Lucky7.resources = {};
    r = L7R('thing');
    thing = r.post({name:'widget'});

  it gets resources by id
    value_of(r.get(thing.data.id)).should_not_be_null();

  it sets values from post
    value_of(thing.data.name).should_be('widget');

  it assigns ids to instances
    value_of(thing.data.id).should_not_be(null);

  it updates values from put
    thing.put({name:'fringe'});
    value_of(thing.data.name).should_be('fringe');

  it removes id when deleted
    thing.delete();
    value_of(thing.data.id).should_be_undefined();

  it will not get deleted
    var id = thing.data.id;
    thing.delete();
    value_of(r.get(id)).should_be_undefined();
    
  it advice lifecycle before get
    // not quite sure how to handle this
    value_of(false).should_be_true();

  it advice lifecycle after get
    var id = thing.data.id,
      found = false;
    r.after('get', function(id) {
      found = true;
    });

    r.get(id);
    value_of(found).should_be_true();

  it advice lifecycle before post
    var id;
    r.before('post', function(data) {
      id = id;
    });
    
    r.post({});
    value_of(id).should_be_undefined();

  it advice lifecycle after post
    var id;
    r.after('post', function() {
      id = this.data.id;
    });
    
    r.post({});
    value_of(id).should_not_be_undefined();

  it advice lifecycle before put
    var name;
    r.before('put', function(data) {
      name = this.data.name;
    });
    
    thing.put({name:'not widget'});

    value_of(name).should_be('widget');

  it advice lifecycle after put
    var name;
    r.after('put', function() {
      name = this.data.name;
    });
    
    thing.put({name:'not widget'});

    value_of(name).should_be('not widget');

  it advice lifecycle before delete
    var id;
    r.before('delete', function() {
      id = this.data.id;
    });

    thing.delete();

    value_of(id).should_not_be_undefined();

  it advice lifecycle after delete
    var id;
    r.after('delete', function() {
      id = this.id;
    });

    thing.delete();

    value_of(id).should_be_undefined(); 
